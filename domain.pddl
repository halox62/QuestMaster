(define (domain island-adventure)
  (:requirements :strips :typing)
  (:types adventurer location object creature)
  (:predicates
    (at ?a - adventurer ?l - location)
    (accessible ?l - location)
    (object-at ?o - object ?l - location)
    (has-key ?a - adventurer ?o - object)
    (creature-at ?c - creature ?l - location)
    (puzzle-solved ?l - location)
    (path-revealed ?l - location)
  )
  (:action move-to
    :parameters (?a - adventurer ?from - location ?to - location)
    :precondition (and (at ?a ?from) (accessible ?to))
    :effect (and (at ?a ?to) (not (at ?a ?from)))
  )
  (:action deal-with-creature
    :parameters (?a - adventurer ?l - location ?c - creature)
    :precondition (and (at ?a ?l) (creature-at ?c ?l))
    :effect (and (path-revealed ?l) (not (creature-at ?c ?l)))
  )
  (:action take-key
    :parameters (?a - adventurer ?o - object ?l - location)
    :precondition (and (at ?a ?l) (object-at ?o ?l))
    :effect (and (has-key ?a ?o) (not (object-at ?o ?l)))
  )
  (:action solve-puzzle
    :parameters (?a - adventurer ?l - location ?o - object)
    :precondition (and (at ?a ?l) (has-key ?a ?o) (path-revealed ?l))
    :effect (and (puzzle-solved ?l))
  )
  (:action follow-path
    :parameters (?a - adventurer ?from - location ?to - location)
    :precondition (and (at ?a ?from) (path-revealed ?from) (puzzle-solved ?from))
    :effect (and (at ?a ?to) (not (at ?a ?from)) (accessible ?to))
  )
)